__int64 sub_FFFFF8800485A834()
{
  __int64 result; // rax
  signed int i; // [rsp+0h] [rbp-18h]

  for ( i = 0; i < 16; ++i )
  {
    byte_FFFFF88004865600[i] ^= off_FFFFF88004865540[i];
    result = (i + 1);
  }
  dword_FFFFF88004865610 = 8;
  return result;
}

off_FFFFF88004865540
4B 61 50 64 53 67 56 6B  58 70 32 73 35 76 38 79
72 66 E6 F2 21 01 B0 99  79 71 82 EA 4C 07 BA 93
B5 92 3A DB 94 93 8A 42  ED E2 08 A8 A1 E5 B2 3B
68 A5 D8 E9 FC 36 52 AB  11 D4 5A 03 B0 31 E8 38
A7 3E DF 0E 5B 08 8D A5  4A DC D7 A6 FA ED 3F 9E
E2 4B D4 23 B9 43 59 86  F3 9F 8E 20 09 72 B1 BE
82 83 7A 22 3B C0 23 A4  C8 5F AD 84 C1 2D 1C 3A
1A 1F FA 5A 21 DF D9 FE  E9 80 74 7A 28 AD 68 40
0F 5A F3 6E 2E 85 2A 90  C7 05 5E EA EF A8 36 AA
D6 5F 5F B1 F8 DA 75 21  3F DF 2B CB D0 77 1D 61
15 FB B0 C1 ED 21 C5 E0  D2 FE EE 2B 02 89 F3 4A

__int64 sub_FFFFF88004862090()
{
  __int64 result; // rax
  signed int i; // [rsp+0h] [rbp-18h]

  for ( i = 0; i < 16; ++i )
  {
    _mm_lfence();
    byte_FFFFF88004865600[i] = off_FFFFF88004864100[byte_FFFFF88004865600[i]];
    result = (i + 1);
  }
  dword_FFFFF88004865610 = 127;
  return result;
}

off_FFFFF88004864100
63 7C 77 7B F2 6B 6F C5  30 01 67 2B FE D7 AB 76
CA 82 C9 7D FA 59 47 F0  AD D4 A2 AF 9C A4 72 C0
B7 FD 93 26 36 3F F7 CC  34 A5 E5 F1 71 D8 31 15
04 C7 23 C3 18 96 05 9A  07 12 80 E2 EB 27 B2 75
09 83 2C 1A 1B 6E 5A A0  52 3B D6 B3 29 E3 2F 84
53 D1 00 ED 20 FC B1 5B  6A CB BE 39 4A 4C 58 CF
D0 EF AA FB 43 4D 33 85  45 F9 02 7F 50 3C 9F A8
51 A3 40 8F 92 9D 38 F5  BC B6 DA 21 10 FF F3 D2
CD 0C 13 EC 5F 97 44 17  C4 A7 7E 3D 64 5D 19 73
60 81 4F DC 22 2A 90 88  46 EE B8 14 DE 5E 0B DB
E0 32 3A 0A 49 06 24 5C  C2 D3 AC 62 91 95 E4 79
E7 C8 37 6D 8D D5 4E A9  6C 56 F4 EA 65 7A AE 08
BA 78 25 2E 1C A6 B4 C6  E8 DD 74 1F 4B BD 8B 8A
70 3E B5 66 48 03 F6 0E  61 35 57 B9 86 C1 1D 9E
E1 F8 98 11 69 D9 8E 94  9B 1E 87 E9 CE 55 28 DF
8C A1 89 0D BF E6 42 68  41 99 2D 0F B0 54 BB 16

char sub_FFFFF88004860644()
{
  char result; // al

  byte_FFFFF880048655F0[0] = byte_FFFFF88004865600[0];
  byte_FFFFF880048655F0[1] = byte_FFFFF88004865600[5];
  byte_FFFFF880048655F0[2] = byte_FFFFF88004865600[10];
  result = byte_FFFFF88004865600[15];
  byte_FFFFF880048655F0[3] = result;
  dword_FFFFF88004865610 = 98;
  return result;
}

char sub_FFFFF880048606EC()
{
  char result; // al

  byte_FFFFF880048655F0[4] = byte_FFFFF88004865600[4];
  byte_FFFFF880048655F0[5] = byte_FFFFF88004865600[9];
  byte_FFFFF880048655F0[6] = byte_FFFFF88004865600[14];
  result = byte_FFFFF88004865600[3];
  byte_FFFFF880048655F0[7] = result;
  dword_FFFFF88004865610 = 121;
  return result;
}

char sub_FFFFF88004860794()
{
  char result; // al

  byte_FFFFF880048655F0[8] = byte_FFFFF88004865600[8];
  byte_FFFFF880048655F0[9] = byte_FFFFF88004865600[13];
  byte_FFFFF880048655F0[10] = byte_FFFFF88004865600[2];
  result = byte_FFFFF88004865600[7];
  byte_FFFFF880048655F0[11] = result;
  dword_FFFFF88004865610 = 47;
  return result;
}

char sub_FFFFF8800486083C()
{
  char result; // al

  byte_FFFFF880048655F0[12] = byte_FFFFF88004865600[12];
  byte_FFFFF880048655F0[13] = byte_FFFFF88004865600[1];
  byte_FFFFF880048655F0[14] = byte_FFFFF88004865600[6];
  result = byte_FFFFF88004865600[11];
  byte_FFFFF880048655F0[15] = result;
  dword_FFFFF88004865610 = 48;
  return result;
}

__int64 sub_FFFFF880048608E4()
{
  __int64 result; // rax
  signed int i; // [rsp+0h] [rbp-18h]

  for ( i = 0; i < 16; ++i )
  {
    byte_FFFFF88004865600[i] = byte_FFFFF880048655F0[i];
    result = (i + 1);
  }
  dword_FFFFF88004865610 = 90;
  return result;
}

off_FFFFF88004864500
00 03 06 05 0C 0F 0A 09  18 1B 1E 1D 14 17 12 11
30 33 36 35 3C 3F 3A 39  28 2B 2E 2D 24 27 22 21
60 63 66 65 6C 6F 6A 69  78 7B 7E 7D 74 77 72 71
50 53 56 55 5C 5F 5A 59  48 4B 4E 4D 44 47 42 41
C0 C3 C6 C5 CC CF CA C9  D8 DB DE DD D4 D7 D2 D1
F0 F3 F6 F5 FC FF FA F9  E8 EB EE ED E4 E7 E2 E1
A0 A3 A6 A5 AC AF AA A9  B8 BB BE BD B4 B7 B2 B1
90 93 96 95 9C 9F 9A 99  88 8B 8E 8D 84 87 82 81
9B 98 9D 9E 97 94 91 92  83 80 85 86 8F 8C 89 8A
AB A8 AD AE A7 A4 A1 A2  B3 B0 B5 B6 BF BC B9 BA
FB F8 FD FE F7 F4 F1 F2  E3 E0 E5 E6 EF EC E9 EA
CB C8 CD CE C7 C4 C1 C2  D3 D0 D5 D6 DF DC D9 DA
5B 58 5D 5E 57 54 51 52  43 40 45 46 4F 4C 49 4A
6B 68 6D 6E 67 64 61 62  73 70 75 76 7F 7C 79 7A
3B 38 3D 3E 37 34 31 32  23 20 25 26 2F 2C 29 2A
0B 08 0D 0E 07 04 01 02  13 10 15 16 1F 1C 19 1A

off_FFFFF88004864400
00 02 04 06 08 0A 0C 0E  10 12 14 16 18 1A 1C 1E
20 22 24 26 28 2A 2C 2E  30 32 34 36 38 3A 3C 3E
40 42 44 46 48 4A 4C 4E  50 52 54 56 58 5A 5C 5E
60 62 64 66 68 6A 6C 6E  70 72 74 76 78 7A 7C 7E
80 82 84 86 88 8A 8C 8E  90 92 94 96 98 9A 9C 9E
A0 A2 A4 A6 A8 AA AC AE  B0 B2 B4 B6 B8 BA BC BE
C0 C2 C4 C6 C8 CA CC CE  D0 D2 D4 D6 D8 DA DC DE
E0 E2 E4 E6 E8 EA EC EE  F0 F2 F4 F6 F8 FA FC FE
1B 19 1F 1D 13 11 17 15  0B 09 0F 0D 03 01 07 05
3B 39 3F 3D 33 31 37 35  2B 29 2F 2D 23 21 27 25
5B 59 5F 5D 53 51 57 55  4B 49 4F 4D 43 41 47 45
7B 79 7F 7D 73 71 77 75  6B 69 6F 6D 63 61 67 65
9B 99 9F 9D 93 91 97 95  8B 89 8F 8D 83 81 87 85
BB B9 BF BD B3 B1 B7 B5  AB A9 AF AD A3 A1 A7 A5
DB D9 DF DD D3 D1 D7 D5  CB C9 CF CD C3 C1 C7 C5
FB F9 FF FD F3 F1 F7 F5  EB E9 EF ED E3 E1 E7 E5

__int64 sub_FFFFF8800485B78C()
{
  __int64 result; // rax

  byte_FFFFF880048655F0[0] = byte_FFFFF88004865600[3] ^ byte_FFFFF88004865600[2] ^ off_FFFFF88004864500[byte_FFFFF88004865600[1]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[0]];
  byte_FFFFF880048655F0[1] = byte_FFFFF88004865600[3] ^ off_FFFFF88004864500[byte_FFFFF88004865600[2]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[1]] ^ byte_FFFFF88004865600[0];
  byte_FFFFF880048655F0[2] = off_FFFFF88004864500[byte_FFFFF88004865600[3]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[2]] ^ byte_FFFFF88004865600[1] ^ byte_FFFFF88004865600[0];
  result = off_FFFFF88004864400[byte_FFFFF88004865600[3]] ^ byte_FFFFF88004865600[2] ^ byte_FFFFF88004865600[1] ^ off_FFFFF88004864500[byte_FFFFF88004865600[0]];
  byte_FFFFF880048655F0[3] = off_FFFFF88004864400[byte_FFFFF88004865600[3]] ^ byte_FFFFF88004865600[2] ^ byte_FFFFF88004865600[1] ^ off_FFFFF88004864500[byte_FFFFF88004865600[0]];
  dword_FFFFF88004865610 = 72;
  return result;
}

__int64 sub_FFFFF8800485B994()
{
  __int64 result; // rax

  byte_FFFFF880048655F0[4] = byte_FFFFF88004865600[7] ^ byte_FFFFF88004865600[6] ^ off_FFFFF88004864500[byte_FFFFF88004865600[5]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[4]];
  byte_FFFFF880048655F0[5] = byte_FFFFF88004865600[7] ^ off_FFFFF88004864500[byte_FFFFF88004865600[6]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[5]] ^ byte_FFFFF88004865600[4];
  byte_FFFFF880048655F0[6] = off_FFFFF88004864500[byte_FFFFF88004865600[7]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[6]] ^ byte_FFFFF88004865600[5] ^ byte_FFFFF88004865600[4];
  result = off_FFFFF88004864400[byte_FFFFF88004865600[7]] ^ byte_FFFFF88004865600[6] ^ byte_FFFFF88004865600[5] ^ off_FFFFF88004864500[byte_FFFFF88004865600[4]];
  byte_FFFFF880048655F0[7] = off_FFFFF88004864400[byte_FFFFF88004865600[7]] ^ byte_FFFFF88004865600[6] ^ byte_FFFFF88004865600[5] ^ off_FFFFF88004864500[byte_FFFFF88004865600[4]];
  dword_FFFFF88004865610 = 22;
  return result;
}

__int64 sub_FFFFF8800485BB9C()
{
  __int64 result; // rax

  byte_FFFFF880048655F0[8] = byte_FFFFF88004865600[11] ^ byte_FFFFF88004865600[10] ^ off_FFFFF88004864500[byte_FFFFF88004865600[9]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[8]];
  byte_FFFFF880048655F0[9] = byte_FFFFF88004865600[11] ^ off_FFFFF88004864500[byte_FFFFF88004865600[10]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[9]] ^ byte_FFFFF88004865600[8];
  byte_FFFFF880048655F0[10] = off_FFFFF88004864500[byte_FFFFF88004865600[11]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[10]] ^ byte_FFFFF88004865600[9] ^ byte_FFFFF88004865600[8];
  result = off_FFFFF88004864400[byte_FFFFF88004865600[11]] ^ byte_FFFFF88004865600[10] ^ byte_FFFFF88004865600[9] ^ off_FFFFF88004864500[byte_FFFFF88004865600[8]];
  byte_FFFFF880048655F0[11] = off_FFFFF88004864400[byte_FFFFF88004865600[11]] ^ byte_FFFFF88004865600[10] ^ byte_FFFFF88004865600[9] ^ off_FFFFF88004864500[byte_FFFFF88004865600[8]];
  dword_FFFFF88004865610 = 29;
  return result;
}

__int64 sub_FFFFF8800485BDA4()
{
  __int64 result; // rax

  byte_FFFFF880048655F0[12] = byte_FFFFF88004865600[15] ^ byte_FFFFF88004865600[14] ^ off_FFFFF88004864500[byte_FFFFF88004865600[13]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[12]];
  byte_FFFFF880048655F0[13] = byte_FFFFF88004865600[15] ^ off_FFFFF88004864500[byte_FFFFF88004865600[14]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[13]] ^ byte_FFFFF88004865600[12];
  byte_FFFFF880048655F0[14] = off_FFFFF88004864500[byte_FFFFF88004865600[15]] ^ off_FFFFF88004864400[byte_FFFFF88004865600[14]] ^ byte_FFFFF88004865600[13] ^ byte_FFFFF88004865600[12];
  result = off_FFFFF88004864400[byte_FFFFF88004865600[15]] ^ byte_FFFFF88004865600[14] ^ byte_FFFFF88004865600[13] ^ off_FFFFF88004864500[byte_FFFFF88004865600[12]];
  byte_FFFFF880048655F0[15] = off_FFFFF88004864400[byte_FFFFF88004865600[15]] ^ byte_FFFFF88004865600[14] ^ byte_FFFFF88004865600[13] ^ off_FFFFF88004864500[byte_FFFFF88004865600[12]];
  dword_FFFFF88004865610 = 46;
  return result;
}

__int64 sub_FFFFF8800485BFAC()
{
  __int64 result; // rax
  signed int i; // [rsp+0h] [rbp-18h]

  for ( i = 0; i < 16; ++i )
  {
    byte_FFFFF88004865600[i] = byte_FFFFF880048655F0[i];
    result = (i + 1);
  }
  dword_FFFFF88004865610 = 79;
  return result;
}

signed __int64 sub_FFFFF8800485A890()
{
  signed __int64 result; // rax
  signed int i; // [rsp+0h] [rbp-18h]

  for ( i = 16; ; ++i )
  {
    result = 32i64;
    if ( i >= 32 )
      break;
    byte_FFFFF88004865600[i - 16] ^= qword_FFFFF88004865540[i];
  }
  dword_FFFFF88004865610 = 92;
  return result;
}

new[0] = old[3] ^ old[2] ^ B[old[1]] ^ A[old[0]];
new[1] = old[3] ^ B[old[2]] ^ A[old[1]] ^ old[0];
new[2] = B[old[3]] ^ A[old[2]] ^ old[1] ^ old[0];
new[3] = A[old[3]] ^ old[2] ^ old[1] ^ B[old[0]];

A=X^Y
B=X^Z
F2 63 69 4F F5 CB FB F4  98 19 C2 FD 39 ED F9 CC
5D EC D9 EC 66 A5 30 D1  82 46 7D A9 FD 5B 3C BF
1C 3D BD 70 26 00 6A 43  C4 0A 47 4C B7 56 2D 50